{"version":3,"sources":["models/light-map.jpg","models/normal-map.jpg","models/Shoe2019.glb","reducers/colReducer.js","reducers/nameReducer.js","store.js","actions/actions.js","CanvasThree.js","DetailsPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","colReducer","state","entry","action","type","col","payload","nameReducer","sum","name","rootReducer","combineReducers","panCol","panName","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","colAction","nameAction","CanvasThree","useEffect","scene","THREE","canvas","document","querySelector","renderer","antialias","width","clientWidth","height","clientHeight","model","mouse3D","objects","onStart","url","itemsLoaded","itemsTotal","console","log","onLoad","intersected","event","intersects","camera","position","intersectObjects","length","setColor","Math","random","object","material","color","setHex","r","g","b","store","dispatch","substring","indexOf","addEventListener","clientX","innerWidth","clientY","innerHeight","unproject","sub","normalize","targetTouches","requestAnimationFrame","render","domElement","needResize","setSize","resizeRendererToDisplaySize","aspect","updateProjectionMatrix","controls","update","init","modelMat","clearMat","z","setClearColor","setViewport","OrbitControls","texLoad","load","lightMap","light","normMap","norm","GLTFLoader","shoeModel","gltf","scale","x","y","set","traverse","o","isMesh","normalMap","blending","opacity","transparent","reflectivity","push","add","xhr","loaded","total","error","main","id","mapStatetoProps","mapDispatchToProps","displayCol","displayName","ConnectedName","connect","props","ConnectedPanel","className","style","backgroundColor","DetailsPanel","App","Boolean","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f102acc1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/light-map.c927ad26.jpg\";","module.exports = __webpack_public_path__ + \"static/media/normal-map.6d60f5ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Shoe2019.6a5a3268.glb\";","\r\nconst colReducer = (state = {entry:\"grey\"}, action) =>{ \r\n    if (action.type === 'DISPLAY_COL'){\r\n      return {col: action.payload};\r\n    }\r\n    return state;\r\n  }\r\n  \r\n  export default colReducer;","\r\nconst nameReducer = (state = {sum:\"Part\"}, action) =>{ \r\n    if (action.type === 'DISPLAY_NAME'){\r\n      return {name: action.payload};\r\n    }\r\n    return state;\r\n  }\r\n\r\n  export default nameReducer;\r\n  ","import { createStore, combineReducers} from 'redux';\r\nimport colReducer from \"./reducers/colReducer\";\r\nimport nameReducer from \"./reducers/nameReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    panCol: colReducer,\r\n    panName: nameReducer, \r\n  });\r\n\r\nexport default createStore(\r\n  rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n );","export function colAction(col){\r\n  return {\r\n    type: 'DISPLAY_COL',\r\n    payload: col,\r\n  };\r\n}\r\n\r\nexport function nameAction(name){\r\n  return {\r\n    type: 'DISPLAY_NAME',\r\n    payload: name,\r\n  };\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport store from \"./store\";\r\nimport {colAction, nameAction} from './actions/actions';\r\n\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\r\nimport lightMap from './models/light-map.jpg';\r\nimport normMap from './models/normal-map.jpg';\r\nimport shoeModel from './models/Shoe2019.glb';\r\n\r\nconst CanvasThree = () =>{\r\n\r\n  const colDispatched = (col) =>{\r\n    store.dispatch(colAction(col));\r\n  }\r\n\r\n  const nameDispatched = (name) => {\r\n    store.dispatch(nameAction(name));\r\n  }\r\n    \r\n  useEffect(() => {\r\n    var scene = new THREE.Scene();\r\n    function main() {\r\n      const canvas = document.querySelector('#c');\r\n      const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\r\n      canvas.width = canvas.clientWidth;\r\n      canvas.height = canvas.clientHeight;\r\n  \r\n      var objects = [];\r\n      var model;\r\n      var scale = 0.05;\r\n      var mouse3D;\r\n  \r\n      // LOADING MANAGER\r\n      THREE.DefaultLoadingManager.onStart = function(url, itemsLoaded, itemsTotal) {\r\n        console.log(\r\n          'Started loading file: ' +\r\n          url +\r\n          '.\\nLoaded ' +\r\n          itemsLoaded +\r\n          ' of ' +\r\n          itemsTotal +\r\n          ' files.'\r\n        );\r\n      };\r\n      THREE.DefaultLoadingManager.onLoad = function() {\r\n        console.log('Loading Complete!');\r\n          init();\r\n        };\r\n  \r\n        // MATERIALS\r\n        //var partMat = new THREE.MeshLambertMaterial({ color: 0x7a7a7a });\r\n        var modelMat = new THREE.MeshPhongMaterial({ color: 0x393939 });\r\n        var clearMat = new THREE.MeshPhongMaterial({ color: 0xffffff });\r\n       // var airMat = new THREE.MeshPhongMaterial({ color: 0x170078 });\r\n        // CAMERA\r\n        var camera = new THREE.PerspectiveCamera(\r\n          75,\r\n          window.innerWidth / window.innerHeight,\r\n          0.1,\r\n          1000\r\n        );\r\n        camera.position.z = 4;\r\n  \r\n        // RENDERER\r\n        renderer.setClearColor('#ffffff');\r\n        // Configure renderer size\r\n        renderer.setViewport(0, 0, canvas.clientWidth, canvas.clientHeight);\r\n  \r\n        // CONTROLS\r\n        var controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.update();\r\n  \r\n        /*\r\n        // LIGHTS\r\n        const color = 0xFFFFFF;\r\n        const intensity = 1;\r\n        const light = new THREE.DirectionalLight(color, intensity);\r\n        light.position.set(-1, 2, 4);\r\n        light.castShadow = true;\r\n        scene.add(light);\r\n  \r\n        var ambLight = new THREE.AmbientLight(0xffffff, 0.25);\r\n        ambLight.position.y = 5;\r\n        scene.add(ambLight);\r\n        */\r\n  \r\n        // MODEL LOAD\r\n        var texLoad = new THREE.TextureLoader();\r\n        texLoad.load(lightMap, function(light) {\r\n          texLoad.load(normMap, function(norm) {\r\n            var modelLoad = new GLTFLoader();\r\n            modelLoad.load(\r\n              shoeModel,\r\n              function(gltf) {\r\n                model = gltf.scene;\r\n                model.scale.x = scale;\r\n                model.scale.z = scale;\r\n                model.scale.y = scale;\r\n                model.position.set(0, -0.5, 0);\r\n  \r\n                model.traverse(function(o) {\r\n                  if (o.isMesh) {\r\n                    if (\r\n                      o.name === '001_laces' ||\r\n                      o.name === '005_swoosh' ||\r\n                      o.name === '100_midsolebrand'\r\n                    ) {\r\n                      o.material = modelMat;\r\n                    }\r\n  \r\n                    if (o.name === '012_sole') {\r\n                      o.material = new THREE.MeshPhongMaterial({ color: 0x393939 });\r\n                    }\r\n  \r\n                    if (o.name === '003_upper') {\r\n                      o.material = new THREE.MeshPhongMaterial({ color: 0x393939 });\r\n                    }\r\n  \r\n                    if (o.name === '006_airbags') {\r\n                      o.material = new THREE.MeshPhongMaterial({ color: 0x393939 });\r\n                      /*\r\n                      o.material = airMat;\r\n                      o.material.opacity = 0.8;\r\n                      o.material.reflectivity = 3;\r\n                      */\r\n                    }\r\n  \r\n                    o.material.lightMap = light;\r\n                    o.material.normalMap = norm;\r\n  \r\n                    if (o.name === '100_transparent') {\r\n                      o.material = clearMat;\r\n                      o.material.blending = THREE.AdditiveBlending;\r\n                      o.material.opacity = 0.5;\r\n                      o.material.transparent = true;\r\n                      o.material.reflectivity = 3;\r\n                     // o.selectable = false;\r\n                      console.log(o);\r\n                    }\r\n                    \r\n                    if (o.name !== '100_transparent'){\r\n                      objects.push(o);\r\n                    }\r\n                    \r\n                  }\r\n                });\r\n  \r\n                scene.add(model);\r\n              },\r\n              function(xhr) {\r\n                console.log((xhr.loaded / xhr.total) * 100 + '% loaded');\r\n              },\r\n              function(error) {\r\n                console.log('An error happended');\r\n              }\r\n            );\r\n          });\r\n        });\r\n  \r\n        function resizeRendererToDisplaySize(renderer) {\r\n          const canvas = renderer.domElement;\r\n          const width = canvas.clientWidth;\r\n          const height = canvas.clientHeight;\r\n          const needResize = canvas.width !== width || canvas.height !== height;\r\n          if (needResize) {\r\n            renderer.setSize(width, height, false);\r\n          }\r\n          return needResize;\r\n        }\r\n  \r\n        // RAYCAST\r\n        function init() {\r\n          canvas.addEventListener('mousedown', onDocumentMouseDown, false);\r\n          canvas.addEventListener('touchstart', onDocumentTouchDown, false);\r\n  \r\n          function onDocumentMouseDown(event) {\r\n            console.log('Clicked');\r\n            mouse3D = new THREE.Vector3(\r\n              (event.clientX / window.innerWidth) * 2 - 1,\r\n              -(event.clientY / window.innerHeight) * 2 + 1,\r\n              0.5\r\n            );\r\n            mouse3D.unproject(camera);\r\n            mouse3D.sub(camera.position);\r\n            mouse3D.normalize();\r\n            intersected(event);\r\n          }\r\n  \r\n          function onDocumentTouchDown(event) {\r\n            console.log('Touched');\r\n            mouse3D = new THREE.Vector3(\r\n              (event.targetTouches[0].clientX / window.innerWidth) * 2 - 1,\r\n              -(event.targetTouches[0].clientY / window.innerHeight) * 2 + 1,\r\n              0.5\r\n            );\r\n            mouse3D.unproject(camera);\r\n            mouse3D.sub(camera.position);\r\n            mouse3D.normalize();\r\n            intersected(event);\r\n          }\r\n          \r\n          function intersected(event){\r\n            var raycaster = new THREE.Raycaster(camera.position, mouse3D);\r\n            var intersects = raycaster.intersectObjects(objects);\r\n            // Change color if hit\r\n            if (intersects.length > 0) {\r\n              let setColor = Math.random() * 0xffffff;\r\n              intersects[0].object.material.color.setHex(Math.random() * 0xffffff);\r\n              intersects[0].object.material.color.setHex(setColor);\r\n              colDispatched(\"rgb(\" + intersects[0].object.material.color.r * 255 + \",\" + intersects[0].object.material.color.g * 255 + \",\" + intersects[0].object.material.color.b * 255 + \")\");\r\n              nameDispatched(intersects[0].object.name.substring(intersects[0].object.name.indexOf(\"_\") + 1));\r\n            }\r\n          }\r\n    \r\n          // RENDER\r\n          function render() {\r\n            if (resizeRendererToDisplaySize(renderer)) {\r\n              const canvas = renderer.domElement;\r\n              camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n              camera.updateProjectionMatrix();\r\n            }\r\n  \r\n            controls.update();\r\n            // Render the scene\r\n            renderer.render(scene, camera);\r\n            requestAnimationFrame(render);\r\n          }\r\n          requestAnimationFrame(render);\r\n        }\r\n  \r\n        window.addEventListener('resize', onWindowResize, false);\r\n        function onWindowResize() {\r\n        }\r\n      }\r\n  \r\n      main();\r\n    });\r\n    \r\n    return (\r\n      <>\r\n        <canvas id= \"c\"></canvas>\r\n      </> \r\n    )\r\n  }\r\n  \r\n  \r\n  export default CanvasThree;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {colAction, nameAction} from './actions/actions';\r\n\r\nconst mapStatetoProps = (state => {\r\n    return {\r\n      col:state.panCol.col,\r\n      name:state.panName.name,\r\n    };\r\n  });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    displayCol: () => dispatch(colAction()),\r\n    displayName: () => dispatch(nameAction()),\r\n});\r\n\r\nconst Name = (props) => {\r\n  return (\r\n    <p id=\"partName\">{props.name}</p>\r\n  )\r\n}\r\n\r\nconst Panel = (props) =>{\r\n    return (\r\n        <div className=\"App\">\r\n            <div id=\"colBlock\"  style={{ backgroundColor:props.col}} >\r\n                <ConnectedName/>\r\n            </div>      \r\n        </div>\r\n    )\r\n  }\r\n\r\nconst ConnectedName = connect(mapStatetoProps, mapDispatchToProps)(Name);\r\nconst ConnectedPanel = connect(mapStatetoProps, mapDispatchToProps)(Panel);\r\n\r\nconst DetailsPanel = () =>{\r\n  return (\r\n      <ConnectedPanel/>\r\n    )\r\n}\r\n\r\nexport default DetailsPanel;\r\n  ","import React from 'react';\r\nimport store from \"./store\";\r\nimport { Provider } from 'react-redux';\r\nimport './App.css';\r\nimport CanvasThree from './CanvasThree';\r\nimport DetailsPanel from './DetailsPanel';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <DetailsPanel/>\r\n      <CanvasThree/>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}